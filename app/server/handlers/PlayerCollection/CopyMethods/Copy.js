/**
 * Абстрактный класс для копирования объектов.
 * Этот класс предоставляет интерфейс для создания копий объектов, который должен быть
 * реализован в наследуемых классах для конкретной логики копирования.
 *
 * @abstract
 */
class Copy {
    /**
     * Возвращает коллекцию игроков, с которой будет работать фильтр или сортировка.
     * Должен быть переопределен в подклассах.
     * @returns {PlayerCollection|null} Коллекция игроков, либо null, если коллекция не установлена.
     * @throws {Error} Если метод вызывается в базовом абстрактном классе.
     * @abstract
     */
    get playerCollection() {
        throw new Error("Метод 'playerCollection' должен быть реализован в наследуемом классе.");
    }

    /**
     * Устанавливает коллекцию игроков, с которой будет работать фильтр или сортировка.
     * Должен быть переопределен в подклассах.
     * @param {PlayerCollection} value - Коллекция игроков для обработки.
     * @throws {Error} Если метод вызывается в базовом абстрактном классе.
     * @abstract
     */
    set playerCollection(value) {
        throw new Error("Метод 'playerCollection' должен быть реализован в наследуемом классе.");
    }

    /**
     * Инициализирует экземпляр класса с указанной коллекцией игроков.
     * Должен быть реализован в подклассах для обеспечения корректной инициализации.
     * @param {PlayerCollection} playerCollection - Коллекция игроков для инициализации.
     * @returns {Copy} Экземпляр класса, наследующего от Copy.
     * @throws {Error} Если метод вызывается в базовом абстрактном классе.
     * @abstract
     */
    static init(playerCollection) {
        throw new Error("Метод 'init' должен быть реализован в наследуемом классе.");
    }
}

module.exports = Copy;
